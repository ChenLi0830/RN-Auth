service: RNAuth

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  defaultStage: dev

provider:
  name: aws
  runtime: nodejs4.3
  stage: ${opt:stage, self:custom.defaultStage}
  # Deploys to dev stage by default.
  # To deploy for production, run 'serverless deploy --stage production'
  profile: ${self:provider.stage}Profile
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:us-west-2:*:table/test"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  upsertUser:
    handler: users.crud
    memorySize: 128 # optional, default is 1024
    timeout: 10 # optional, default is 6
    events:
      - http: post users
      - http: put users
      - http: get users
      - http: delete users

#  followUsers:
#    handler: users.followUsers
#    memorySize: 512 # optional, default is 1024
#    timeout: 60 # optional, default is 6
#    events:
#      - http:
#          path: user/follow # follow users
#          method: post
#          cors: true
#      - http:
#          path: user/getFollowers # follow users
#          method: post
#          cors: true
##      - stream: ${self:custom.${self:provider.stage}Stream}
#
#  loginStart:
#    handler: login.loginStart
#    memorySize: 128
#    events:
#      - http:
#          path: loginStart
#          method: get
#          cors: true
#
#  getToken:
#    handler: login.getToken
#    memorySize: 128
#    events:
#      - http:
#          path: getToken
#          method: get
#          cors: true
#
#  addingUsersToTest:
#    handler: test.addingUsersToTest
#    timeout: 60

# 当前实用的resource - you can add CloudFormation resource templates here

resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'RNAUTH_Users'

    EmployeesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: N
          -
            AttributeName: employeeId
            AttributeType: N
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: employeeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'RNAUTH_Employees'

